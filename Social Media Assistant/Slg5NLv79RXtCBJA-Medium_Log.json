{
  "name": "Medium Log",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        304,
        -176
      ],
      "id": "82908407-4905-445c-9e6f-25cc3e238e51",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "={{ $json.feed_url }}",
        "options": {
          "ignoreSSL": false
        }
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        976,
        -176
      ],
      "id": "cb080aea-039a-4b85-a372-c6ffccda0042",
      "name": "RSS Read"
    },
    {
      "parameters": {
        "jsCode": "const timeZone = \"Europe/Bucharest\";\n\n// Get today's date in the desired timezone (formatted as YYYY-MM-DD)\nconst now = new Date();\nconst today = now.toLocaleDateString(\"en-CA\", { timeZone });\n\nreturn items\n  .map(item => {\n    const postDate = new Date(item.json.pubDate);\n    const postLocal = postDate.toLocaleDateString(\"en-CA\", { timeZone });\n\n    return {\n      json: {\n        guid: item.json.guid || item.json.link,\n        title: item.json.title,\n        link: item.json.link,\n        date: postLocal,\n        creator: item.json.creator || item.json[\"dc:creator\"] || \"unknown\",\n        snippet: item.json.contentSnippet || item.json.content || \"(no caption)\"\n      }\n    };\n  })\n  .filter(item => item.json.date === today);\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        -176
      ],
      "id": "29cba17e-5b20-4fe5-99dc-92312e0d610e",
      "name": "Code",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "17-EsdJPMCVIMf9tRP9cUyx9HQnWpUxG3VhBTjDQrYg4",
          "mode": "list",
          "cachedResultName": "n8n DATABASE",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-EsdJPMCVIMf9tRP9cUyx9HQnWpUxG3VhBTjDQrYg4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Social Media Daily",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-EsdJPMCVIMf9tRP9cUyx9HQnWpUxG3VhBTjDQrYg4/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "DATE": "={{ $json.date }}",
            "CREATOR": "={{ $json.creator }}",
            "PLATFORM": "Medium",
            "CONTENT": "={{ $json.snippet }}",
            "CONTENT LINK": "={{ $json.link }}",
            "STATUS": "Not Sent",
            "GUID": "={{ $json.guid }}",
            "TITLE": "={{ $json.title }}"
          },
          "matchingColumns": [
            "GUID"
          ],
          "schema": [
            {
              "id": "DATE",
              "displayName": "DATE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PLATFORM",
              "displayName": "PLATFORM",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CREATOR",
              "displayName": "CREATOR",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TITLE",
              "displayName": "TITLE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CONTENT",
              "displayName": "CONTENT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CONTENT LINK",
              "displayName": "CONTENT LINK",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "STATUS",
              "displayName": "STATUS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "GUID",
              "displayName": "GUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "cellFormat": "USER_ENTERED"
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1408,
        -176
      ],
      "id": "3b12324b-54f0-4c38-910a-00921f288d47",
      "name": "Google Sheets"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"input_link\": \"https://medium.com/tag/movies\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        528,
        -176
      ],
      "id": "cdf66bc2-2f43-4bee-9d21-ce47db5a33f6",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json.input_link || '';\nlet feedUrl = '';\nlet creator = 'Unknown';\n\ntry {\n  const mediumLink = input.trim().toLowerCase();\n\n  if (!mediumLink.includes('medium.com')) {\n    throw new Error('Not a Medium link');\n  }\n\n  const path = mediumLink.split('medium.com/')[1].split(/[?#]/)[0];\n  const parts = path.split('/').filter(Boolean);\n\n  if (parts[0] === 'tag' && parts[1]) {\n    // Example: https://medium.com/tag/movies\n    feedUrl = `https://medium.com/feed/tag/${parts[1]}`;\n    creator = parts[1];\n  } else if (parts[0].startsWith('@')) {\n    // Example: https://medium.com/@username\n    const username = parts[0].replace('@', '');\n    feedUrl = `https://medium.com/feed/@${username}`;\n    creator = username;\n  } else if (parts[0]) {\n    // Example: https://medium.com/publication-name\n    const publication = parts[0];\n    feedUrl = `https://medium.com/feed/${publication}`;\n    creator = publication;\n  } else {\n    throw new Error('Invalid Medium structure');\n  }\n\n  return [{\n    json: {\n      feed_url: feedUrl,\n      creator: creator\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      error: error.message,\n      original_link: input\n    }\n  }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        752,
        -176
      ],
      "id": "f2d00218-3004-4204-ba67-e17737882b9b",
      "name": "Code1"
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 0,
  "meta": null
}