{
  "name": "Simple Data Processing Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "webhook-trigger",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "550e8400-e29b-41d4-a716-446655440001",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "550e8400-e29b-41d4-a716-446655440001"
    },
    {
      "parameters": {
        "jsCode": "// Process incoming webhook data\ntry {\n  const inputData = $input.all();\n  const processedItems = [];\n  \n  for (const item of inputData) {\n    const data = item.json;\n    \n    // Basic data validation\n    if (!data || typeof data !== 'object') {\n      throw new Error('Invalid input data format');\n    }\n    \n    // Process the data\n    const processedItem = {\n      id: data.id || Math.random().toString(36).substr(2, 9),\n      timestamp: new Date().toISOString(),\n      originalData: data,\n      processed: true,\n      status: 'success'\n    };\n    \n    processedItems.push({ json: processedItem });\n  }\n  \n  return processedItems;\n  \n} catch (error) {\n  return [{\n    json: {\n      error: true,\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      status: 'failed'\n    }\n  }];\n}"
      },
      "id": "550e8400-e29b-41d4-a716-446655440002",
      "name": "Process Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "550e8400-e29b-41d4-a716-446655440003",
              "leftValue": "={{ $json.error }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "550e8400-e29b-41d4-a716-446655440004",
      "name": "Check for Errors",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle successful processing\ntry {\n  const items = $input.all();\n  const successItems = [];\n  \n  for (const item of items) {\n    const data = item.json;\n    \n    const successResponse = {\n      ...data,\n      processedAt: new Date().toISOString(),\n      workflow: 'Simple Data Processing Workflow',\n      result: 'Data processed successfully'\n    };\n    \n    successItems.push({ json: successResponse });\n  }\n  \n  return successItems;\n  \n} catch (error) {\n  return [{\n    json: {\n      error: true,\n      message: 'Error in success handler: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "550e8400-e29b-41d4-a716-446655440005",
      "name": "Handle Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle processing errors\ntry {\n  const items = $input.all();\n  const errorItems = [];\n  \n  for (const item of items) {\n    const data = item.json;\n    \n    const errorResponse = {\n      error: true,\n      originalError: data.message || 'Unknown error',\n      timestamp: new Date().toISOString(),\n      workflow: 'Simple Data Processing Workflow',\n      result: 'Processing failed',\n      retry: false\n    };\n    \n    errorItems.push({ json: errorResponse });\n  }\n  \n  return errorItems;\n  \n} catch (error) {\n  return [{\n    json: {\n      error: true,\n      message: 'Critical error in error handler: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "550e8400-e29b-41d4-a716-446655440006",
      "name": "Handle Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        400
      ]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Data": {
      "main": [
        [
          {
            "node": "Check for Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Errors": {
      "main": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "550e8400-e29b-41d4-a716-446655440000",
  "meta": {
    "templateCredsSetupCompleted": true,
    "description": "A simple workflow that processes incoming webhook data with error handling and conditional routing"
  },
  "id": "550e8400-e29b-41d4-a716-446655440000",
  "tags": [
    "ai-generated",
    "general-purpose",
    "webhook"
  ]
}