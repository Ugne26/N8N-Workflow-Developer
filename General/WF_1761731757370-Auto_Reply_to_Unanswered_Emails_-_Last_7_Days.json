{
  "name": "Auto Reply to Unanswered Emails - Last 7 Days",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Check Every Hour",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        200,
        300
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "query": "is:inbox -is:replied after:{{$now.minus({days: 7}).format('YYYY/MM/DD')}}"
        }
      },
      "id": "gmail-fetch",
      "name": "Get Unanswered Emails (7 Days)",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        420,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Filter emails that haven't been replied to and are older than configured time\nconst items = $input.all();\nconst filteredEmails = [];\n\nfor (const item of items) {\n  try {\n    const email = item.json;\n    const receivedDate = new Date(email.date);\n    const now = new Date();\n    const hoursSinceReceived = (now - receivedDate) / (1000 * 60 * 60);\n    \n    // Only process emails older than 2 hours to avoid immediate auto-replies\n    if (hoursSinceReceived >= 2 && hoursSinceReceived <= 168) { // 168 hours = 7 days\n      // Check if this is not an automated email\n      const isNotAutomated = !email.subject.toLowerCase().includes('noreply') && \n                            !email.subject.toLowerCase().includes('no-reply') &&\n                            !email.from.toLowerCase().includes('noreply') &&\n                            !email.from.toLowerCase().includes('no-reply');\n      \n      if (isNotAutomated) {\n        filteredEmails.push({\n          json: {\n            messageId: email.id,\n            threadId: email.threadId,\n            subject: email.subject,\n            from: email.from,\n            to: email.to,\n            date: email.date,\n            snippet: email.snippet,\n            originalSubject: email.subject.startsWith('Re:') ? email.subject : `Re: ${email.subject}`\n          }\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Error processing email:', error);\n  }\n}\n\nreturn filteredEmails;"
      },
      "id": "filter-emails",
      "name": "Filter Valid Emails",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-emails",
              "leftValue": "={{ $json.messageId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-has-emails",
      "name": "Has Emails to Reply?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        860,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate contextual auto-reply based on email content\nconst item = $input.first();\nconst email = item.json;\n\n// Extract key information from the original email\nconst snippet = email.snippet || '';\nconst subject = email.subject || '';\n\n// Generate appropriate response based on content analysis\nlet replyMessage = '';\n\nif (snippet.toLowerCase().includes('meeting') || snippet.toLowerCase().includes('appointment')) {\n  replyMessage = `Thank you for your email regarding a meeting. I have received your message and will review my calendar to get back to you with available times within the next business day.\n\nIf this is urgent, please feel free to call me directly.\n\nBest regards`;\n} else if (snippet.toLowerCase().includes('quote') || snippet.toLowerCase().includes('pricing') || snippet.toLowerCase().includes('cost')) {\n  replyMessage = `Thank you for your inquiry about pricing. I have received your request and will prepare a detailed quote for you within 24-48 hours.\n\nIf you have any additional requirements or questions in the meantime, please don't hesitate to reach out.\n\nBest regards`;\n} else if (snippet.toLowerCase().includes('support') || snippet.toLowerCase().includes('help') || snippet.toLowerCase().includes('issue')) {\n  replyMessage = `Thank you for contacting support. I have received your request and will investigate the issue you've described.\n\nI'll get back to you with a solution or update within one business day. If this is a critical issue, please mark your email as urgent.\n\nBest regards`;\n} else if (snippet.toLowerCase().includes('partnership') || snippet.toLowerCase().includes('collaboration') || snippet.toLowerCase().includes('business')) {\n  replyMessage = `Thank you for reaching out regarding a potential business opportunity. I appreciate your interest and will review your proposal carefully.\n\nI'll respond with next steps within the next few business days.\n\nBest regards`;\n} else {\n  replyMessage = `Thank you for your email. I have received your message and will review it carefully.\n\nI'll get back to you with a proper response within 1-2 business days. If your matter is urgent, please indicate so in a follow-up email.\n\nBest regards`;\n}\n\nreturn [{\n  json: {\n    messageId: email.messageId,\n    threadId: email.threadId,\n    to: email.from,\n    subject: email.originalSubject,\n    replyMessage: replyMessage,\n    originalSnippet: snippet\n  }\n}];"
      },
      "id": "generate-reply",
      "name": "Generate Smart Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        200
      ]
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{ $json.messageId }}",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.replyMessage }}",
        "options": {
          "replyToMessageId": "={{ $json.messageId }}"
        }
      },
      "id": "send-reply",
      "name": "Send Auto Reply",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        1300,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log successful replies for tracking\nconst item = $input.first();\n\nconsole.log('Auto-reply sent successfully:', {\n  messageId: item.json.id,\n  to: item.json.to,\n  subject: item.json.subject,\n  timestamp: new Date().toISOString()\n});\n\nreturn [{\n  json: {\n    success: true,\n    repliedTo: item.json.to,\n    messageId: item.json.id,\n    timestamp: new Date().toISOString(),\n    message: 'Auto-reply sent successfully'\n  }\n}];"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle case when no emails need replies\nconsole.log('No unanswered emails found in the last 7 days', {\n  timestamp: new Date().toISOString(),\n  checked: 'last 7 days'\n});\n\nreturn [{\n  json: {\n    message: 'No emails to reply to',\n    timestamp: new Date().toISOString(),\n    status: 'no_action_needed'\n  }\n}];"
      },
      "id": "no-emails",
      "name": "No Emails Found",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Error handler for the workflow\nconst error = $input.first()?.json?.error || 'Unknown error occurred';\n\nconsole.error('Auto-reply workflow error:', {\n  error: error,\n  timestamp: new Date().toISOString(),\n  workflow: 'auto-reply-unanswered-emails'\n});\n\n// Return error details\nreturn [{\n  json: {\n    success: false,\n    error: error,\n    timestamp: new Date().toISOString(),\n    message: 'Auto-reply workflow encountered an error'\n  }\n}];"
      },
      "id": "error-handler",
      "name": "Handle Errors",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        500
      ]
    }
  ],
  "connections": {
    "cron-trigger": {
      "main": [
        [
          {
            "node": "gmail-fetch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gmail-fetch": {
      "main": [
        [
          {
            "node": "filter-emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter-emails": {
      "main": [
        [
          {
            "node": "check-has-emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-has-emails": {
      "main": [
        [
          {
            "node": "generate-reply",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "no-emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-reply": {
      "main": [
        [
          {
            "node": "send-reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-reply": {
      "main": [
        [
          {
            "node": "log-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "active": false,
  "tags": [
    "ai-generated",
    "email-automation",
    "gmail",
    "auto-reply"
  ],
  "meta": {
    "description": "Automatically sends contextual replies to unanswered emails from the last 7 days. Includes smart filtering to avoid automated emails and generates appropriate responses based on email content. Runs hourly with comprehensive error handling and logging."
  }
}